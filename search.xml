<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STL源码赏析之constructor</title>
      <link href="/STL%E6%BA%90%E7%A0%81%E8%B5%8F%E6%9E%90%E4%B9%8Bconstructor.html"/>
      <url>/STL%E6%BA%90%E7%A0%81%E8%B5%8F%E6%9E%90%E4%B9%8Bconstructor.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>STL中包含五个用于内存处理的全局函数，constructor.h包含其中的两个：destroy, construct。</p></blockquote><p>constructor.h源码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">include &lt;<span class="keyword">new</span>&gt;</span><br><span class="line"></span><br><span class="line">include <span class="string">"TypeTraits.h"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MySTL &#123;</span><br><span class="line"><span class="keyword">template</span>&lt;class T1, class T2&gt;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> construct(T1* ptr1, <span class="keyword">const</span> T2&amp; value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">new</span>(ptr1) T1(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">destroy</span>(<span class="title">T</span>* <span class="title">ptr</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ptr-&gt;~T();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> _<span class="title">destroy</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>, _<span class="title">true_type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> _<span class="title">destroy</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>, _<span class="title">false_type</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">for</span> (; first != last; ++first)</span><br><span class="line">&#123;</span><br><span class="line">destroy(&amp;*first);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">ForwardIterator</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">void</span> <span class="title">destroy</span>(<span class="title">ForwardIterator</span> <span class="title">first</span>, <span class="title">ForwardIterator</span> <span class="title">last</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">typename</span> _type_traits&lt;ForwardIterator&gt;::is_POD_type is_POD_type;</span><br><span class="line">_destroy(first, last, is_POD_type());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>constructor.h 中包含一个 construct 函数和两个版本的 destroy 函数。</p><p>construct 函数的实现比较简单，使用 placement new 通过 T1的拷贝构造函数在已分配的内存上构造一个对象。</p><p>关于 placement new :</p><blockquote><p>Placement new is a variation new operator in C++. Normal new operator does two things :<br>        (1) Allocates memory<br>        (2) Constructs an object in allocated memory.</p><p>Placement new allows us to separate above two things. In placement new, we can pass a preallocated memory and construct an object in the passed memory.</p></blockquote><p>destroy 函数包含两个版本，直接析构版本和迭代器版本。</p><ol><li>第一个版本直接调用传入指针所指对象的析构函数。</li><li>第二个版本先判断传入类型是否是 pod type，如果是，则不必调用析构函数，如果不是，则依次调用析构函数。</li></ol><p>什么是 POD 类型：<a href="https://stackoverflow.com/questions/146452/what-are-pod-types-in-c" target="_blank" rel="noopener">POD</a></p><blockquote><h3 id="Very-informally"><a href="#Very-informally" class="headerlink" title="Very informally:"></a>Very informally:</h3><p>A POD is a type (including classes) where the C++ compiler guarantees that there will be no “magic” going on in the structure: for example hidden pointers to vtables, offsets that get applied to the address when it is cast to other types (at least if the target’s POD too), constructors, or destructors. Roughly speaking, a type is a POD when the only things in it are built-in types and combinations of them. The result is something that “acts like” a C type.</p><h3 id="Less-informally"><a href="#Less-informally" class="headerlink" title="Less informally:"></a>Less informally:</h3><ul><li><code>int</code>, <code>char</code>, <code>wchar_t</code>, <code>bool</code>, <code>float</code>, <code>double</code> are PODs, as are <code>long/short</code> and <code>signed/unsigned</code> versions of them.</li><li>pointers (including pointer-to-function and pointer-to-member) are PODs,</li><li><code>enums</code> are PODs</li><li>a <code>const</code> or <code>volatile</code> POD is a POD.</li><li>a <code>class</code>, <code>struct</code> or <code>union</code> of PODs is a POD provided that all non-static data members are <code>public</code>, and it has no base class and no constructors, destructors, or virtual methods. Static members don’t stop something being a POD under this rule. This rule has changed in C++11 and certain private members are allowed: <a href="https://stackoverflow.com/questions/4762788/can-a-class-with-all-private-members-be-a-pod-class/4762944#4762944" target="_blank" rel="noopener">Can a class with all private members be a POD class?</a></li><li>Wikipedia is wrong to say that a POD cannot have members of type pointer-to-member. Or rather, it’s correct for the C++98 wording, but TC1 made explicit that pointers-to-member are POD.</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity问题解决</title>
      <link href="/Unity%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.html"/>
      <url>/Unity%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.html</url>
      
        <content type="html"><![CDATA[<h3 id="Unity相关问题汇总"><a href="#Unity相关问题汇总" class="headerlink" title="Unity相关问题汇总"></a>Unity相关问题汇总</h3><h4 id="Android打包问题"><a href="#Android打包问题" class="headerlink" title="Android打包问题"></a>Android打包问题</h4><h5 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h5><blockquote><p>Unable to list target platforms. Please make sure the android sdk path is correct. See the Console for more details.</p></blockquote><h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><p>1.找到Android SDK安装路径：</p><p>​    windows系统为：C:\Users\YourUsername\AppData\Local\Android\sdk</p><p>​    mac osx为：/Users/username/Library/Android/sdk</p><p>2.将该文件夹下的 tools 文件夹重命名或者直接删除。</p><p>3.下载新的 SDK tool：</p><p>​    windows版本地址：<a href="http://dl-ssl.google.com/android/repository/tools_r25.2.5-windows.zip" target="_blank" rel="noopener">http://dl-ssl.google.com/android/repository/tools_r25.2.5-windows.zip</a></p><p>​    mac osx版本地址：<a href="https://dl.google.com/android/repository/tools_r25.2.3-macosx.zip" target="_blank" rel="noopener">https://dl.google.com/android/repository/tools_r25.2.3-macosx.zip</a></p><p>4.下载后解压到 SDK文件夹下。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Issues </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL源码赏析之alloc</title>
      <link href="/STL%E6%BA%90%E7%A0%81%E8%B5%8F%E6%9E%90%E4%B9%8Balloc.html"/>
      <url>/STL%E6%BA%90%E7%A0%81%E8%B5%8F%E6%9E%90%E4%B9%8Balloc.html</url>
      
        <content type="html"><![CDATA[<br> <h4 id="空间配置器"><a href="#空间配置器" class="headerlink" title="空间配置器"></a>空间配置器</h4><blockquote><p>空间配置器分为两级，第一级用于分配大于128字节的内存，第二级用于分配小于等于128字节的内存</p></blockquote><br>  <p>Alloc.h</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">include &lt;cstdlib&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MySTL &#123;</span><br><span class="line"><span class="comment">//空间配置器</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">alloc</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//8字节对齐</span></span><br><span class="line"><span class="keyword">enum</span> &#123; ALIGN = <span class="number">8</span> &#125;;</span><br><span class="line"><span class="comment">//空闲链表最大node为128字节</span></span><br><span class="line"><span class="keyword">enum</span> &#123; MAXBYTES = <span class="number">128</span> &#125;;</span><br><span class="line"><span class="comment">//空闲链表数目</span></span><br><span class="line"><span class="keyword">enum</span> &#123; NFREELISTS = <span class="number">16</span> &#125;; <span class="comment">//(MAXBYTES / ALIGN)</span></span><br><span class="line"><span class="keyword">enum</span> &#123; NOBJS = <span class="number">20</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">union</span> obj &#123;</span><br><span class="line"><span class="keyword">union</span> obj* next;</span><br><span class="line"><span class="keyword">char</span> client[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//16个空闲链表的head节点</span></span><br><span class="line"><span class="keyword">static</span> obj* free_list[NFREELISTS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//内存池空闲部分的开始</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span>* start_free;</span><br><span class="line"><span class="comment">//内存池空闲部分的结束</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span>* end_free;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">size_t</span> heap_size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//8字节对齐</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> size_t <span class="title">ROUND_UP</span><span class="params">(<span class="keyword">size_t</span> bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((bytes+ (<span class="keyword">size_t</span>)ALIGN - <span class="number">1</span>) &amp; ~((<span class="keyword">size_t</span>)ALIGN - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得bytes对应的free_list</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> size_t <span class="title">FREELIST_INDEX</span><span class="params">(<span class="keyword">size_t</span> bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (((bytes)+(<span class="keyword">size_t</span>)ALIGN - <span class="number">1</span>) / (<span class="keyword">size_t</span>)ALIGN - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//某一空闲链表空间不足，从内存池中重新分配</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">refill</span><span class="params">(<span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展内存池</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">char</span>* <span class="title">chunk_alloc</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">size_t</span>&amp; nobjs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//分配</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">allocate</span><span class="params">(<span class="keyword">size_t</span> bytes)</span></span>;</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deallocate</span><span class="params">(<span class="keyword">void</span>* ptr, <span class="keyword">size_t</span> bytes)</span></span>;</span><br><span class="line"><span class="comment">//重新分配</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">reallocate</span><span class="params">(<span class="keyword">void</span>* ptr, <span class="keyword">size_t</span> old_sz, <span class="keyword">size_t</span> new_sz)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>Alloc.cpp</p><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">include <span class="string">"../Alloc.h"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> MySTL</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>* alloc::start_free = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span>* alloc::end_free = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> alloc::heap_size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">alloc::obj* alloc::free_list[NFREELISTS] = &#123;</span><br><span class="line"><span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* alloc::allocate(<span class="keyword">size_t</span> bytes) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (bytes &gt; (<span class="keyword">size_t</span>)MAXBYTES)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">malloc</span>(bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> index = FREELIST_INDEX(bytes);</span><br><span class="line">alloc::obj* <span class="built_in">list</span> = free_list[index];</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span>)</span><br><span class="line">&#123;</span><br><span class="line">free_list[index] = <span class="built_in">list</span>-&gt;next;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> refill(ROUND_UP(bytes));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果大于MAXBYTES则直接free。</span></span><br><span class="line"><span class="comment">//如果小于MAXBYTES则将对应的node重新加入空闲链表</span></span><br><span class="line"><span class="keyword">void</span> alloc::deallocate(<span class="keyword">void</span>* ptr, <span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (bytes &gt; (<span class="keyword">size_t</span>)MAXBYTES)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">size_t</span> index = FREELIST_INDEX(bytes);</span><br><span class="line">obj* node = <span class="keyword">static_cast</span>&lt;obj*&gt;(ptr);</span><br><span class="line">node-&gt;next = free_list[index];</span><br><span class="line">free_list[index] = node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* alloc::reallocate(<span class="keyword">void</span>* ptr, <span class="keyword">size_t</span> old_sz, <span class="keyword">size_t</span> new_sz)</span><br><span class="line">&#123;</span><br><span class="line">deallocate(ptr, old_sz);</span><br><span class="line">ptr = allocate(new_sz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* alloc::refill(<span class="keyword">size_t</span> bytes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">size_t</span> nobjs = (<span class="keyword">size_t</span>)NOBJS;</span><br><span class="line"><span class="keyword">char</span>* chunk = chunk_alloc(bytes, nobjs);</span><br><span class="line"></span><br><span class="line">obj** my_free_list = <span class="number">0</span>;</span><br><span class="line">obj* current_obj = <span class="number">0</span>;</span><br><span class="line">obj* next_obj = <span class="number">0</span>;</span><br><span class="line">obj* result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nobjs == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> chunk;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">my_free_list = free_list + FREELIST_INDEX(bytes);</span><br><span class="line"><span class="comment">//此时的my_free_list指向分配的chunk内存的index为1的部分</span></span><br><span class="line">*my_free_list = next_obj = (obj*)(chunk + bytes);</span><br><span class="line">result = (obj*)chunk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>;; i++)</span><br><span class="line">&#123;</span><br><span class="line">current_obj = next_obj;</span><br><span class="line">next_obj = (obj*)((<span class="keyword">char</span>*)next_obj + bytes);</span><br><span class="line"><span class="keyword">if</span> (i == nobjs - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">current_obj-&gt;next = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">current_obj = next_obj;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* alloc::chunk_alloc(<span class="keyword">size_t</span> bytes, <span class="keyword">size_t</span>&amp; nobjs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span>* result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> total_bytes = bytes * nobjs;</span><br><span class="line"><span class="keyword">size_t</span> bytes_left = end_free - start_free;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完全可以满意内存要求的情况</span></span><br><span class="line"><span class="keyword">if</span> (bytes_left &gt;= total_bytes)</span><br><span class="line">&#123;</span><br><span class="line">result = start_free;</span><br><span class="line">start_free += total_bytes;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//部分满足内存要求的情况</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bytes_left &gt;= bytes)</span><br><span class="line">&#123;</span><br><span class="line">result = start_free;</span><br><span class="line">nobjs = (<span class="keyword">size_t</span>) (bytes_left / bytes);</span><br><span class="line">total_bytes = bytes * nobjs;</span><br><span class="line">start_free += total_bytes;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完全不满足内存要求的情况</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//尝试将剩余的空闲字节加入到空闲链表中</span></span><br><span class="line"><span class="keyword">if</span> (bytes_left &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">obj** my_free_list = free_list + FREELIST_INDEX(bytes_left);</span><br><span class="line">((obj*)start_free)-&gt;next = *my_free_list;</span><br><span class="line">*my_free_list = (obj*)start_free;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> bytes_to_get = <span class="number">2</span> * total_bytes + ROUND_UP(heap_size &gt;&gt; <span class="number">4</span>);</span><br><span class="line">start_free = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(bytes_to_get);</span><br><span class="line"><span class="comment">//malloc失败，证明heap不足，尝试从空闲链表中寻找足够大的空间</span></span><br><span class="line"><span class="keyword">if</span> (!start_free)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = bytes; i &lt;= MAXBYTES; i += ALIGN)</span><br><span class="line">&#123;</span><br><span class="line">obj** my_free_list = free_list + FREELIST_INDEX(i);</span><br><span class="line">obj* p = *my_free_list;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//p!=0说明找到空间可以分配</span></span><br><span class="line">*my_free_list = p-&gt;next;</span><br><span class="line">start_free = (<span class="keyword">char</span>*)p;</span><br><span class="line">end_free = start_free + i;</span><br><span class="line"><span class="comment">//递归调用以调整nobjs的值</span></span><br><span class="line"><span class="keyword">return</span> chunk_alloc(bytes, nobjs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">end_free = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">heap_size += bytes_to_get;</span><br><span class="line">end_free = start_free + bytes_to_get;</span><br><span class="line"><span class="comment">//递归调用以调整nobjs的值</span></span><br><span class="line"><span class="keyword">return</span> chunk_alloc(bytes, nobjs);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八皇后问题（回溯法）</title>
      <link href="/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98.html"/>
      <url>/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<br> <h4 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h4><blockquote><p>在 8X8 的棋盘中放入 8 个皇后，要求任意两个 Queue 不同行，不同列，不同对角线。</p></blockquote><br>  <p>采用回溯法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">include &lt;iostream&gt;</span><br><span class="line">include &lt;<span class="built_in">vector</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; Grid;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> GRID_SIZE = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PlaceQueue</span><span class="params">(Grid&amp; grid, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    grid[row][col] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveQueue</span><span class="params">(Grid&amp; grid, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    grid[row][col] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsSafe</span><span class="params">(Grid&amp; grid, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//check row</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; GRID_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[i][col] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//check colume</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; GRID_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[row][i] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//check left bottom</span></span><br><span class="line">    <span class="keyword">int</span> current_row = row;</span><br><span class="line">    <span class="keyword">int</span> current_col = col;</span><br><span class="line">    <span class="keyword">while</span> (--current_row &gt;=<span class="number">0</span> &amp;&amp; --current_col &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[current_row][current_col] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//check left top</span></span><br><span class="line">    current_row = row;</span><br><span class="line">    current_col = col;</span><br><span class="line">    <span class="keyword">while</span> (--current_row &gt;= <span class="number">0</span> &amp;&amp; ++current_col &lt; GRID_SIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(grid[current_row][current_col] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NQueue</span><span class="params">(Grid&amp; grid, <span class="keyword">int</span> colume)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(colume == GRID_SIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; GRID_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(IsSafe(grid, colume, i))</span><br><span class="line">        &#123;</span><br><span class="line">            PlaceQueue(grid, colume, i);</span><br><span class="line">            <span class="keyword">bool</span> success = NQueue(grid, colume + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(success)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                RemoveQueue(grid, colume, i);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintSolution</span><span class="params">(Grid&amp; grid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; GRID_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; GRID_SIZE; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"Solution row : colume "</span> &lt;&lt; i &lt;&lt; <span class="string">"  "</span> &lt;&lt; j &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; grid(GRID_SIZE, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(GRID_SIZE, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span>(NQueue(grid, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        PrintSolution(grid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No Solution Found"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>其中一个 Solution :</p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center">1</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center"></td></tr><tr><td align="center">1</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Shader 属性修饰符总结（水）</title>
      <link href="/Unity%20Shader%20%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6%E6%80%BB%E7%BB%93%EF%BC%88%E6%B0%B4%EF%BC%89.html"/>
      <url>/Unity%20Shader%20%E5%B1%9E%E6%80%A7%E4%BF%AE%E9%A5%B0%E7%AC%A6%E6%80%BB%E7%BB%93%EF%BC%88%E6%B0%B4%EF%BC%89.html</url>
      
        <content type="html"><![CDATA[<br> <p>Unity Shader 属性修饰符总结，方便查阅  </p><br>  <h4 id="属性修饰符简介"><a href="#属性修饰符简介" class="headerlink" title="属性修饰符简介"></a>属性修饰符简介</h4><blockquote><p>在任何属性前面，可以在方括号中指定可选属性。这些属性要么可以被Unity识别，要么可以通过指示自己的MaterialPropertyDrawer类来控制这些属性在 Material Inspector 中的呈现方式。</p></blockquote><br>  <p>Unity识别的属性包含以下几种：</p><ol><li><p>[HideInInspector]：不在 Material Inspector 中显示属性值</p></li><li><p>[NoScaleOffset]：Material Inspector 不会显示具有此属性的纹理属性的 texture tiling/offset 字段</p></li><li><p>[Normal]：表示此纹理需要是一张法线贴图</p></li><li><p>[HDR]：表示此纹理属性需要一张高动态范围（HDR）纹理</p></li><li><p>[Gamma]：对于一个类型为 Float / Vector 的属性，默认情况下不会对它的值作任何转换，但如果在此属性前加上了 [Gamma] 修饰符，则表示它们的值处于 sRGB space，在 shader 中使用时需要先将其值转换到 linear space（转换过程自动完成）。</p></li><li><p>[PerRendererData]：属性用此修饰符修饰时，使用同一个 Material 的各个 Renderer 可以独立的改变该属性值。好处是，1.提升性能；2.在改变某一个 Renderer 的该属性时，Unity 不会自动创建一个新的 Material。缺点是，尽管各个 Renderer 使用同一个材质，但是 MaterialPropertyBlock 会使 Dynamic Batching 失效。使用示例参考下面链接：</p><p><a href="http://thomasmountainborn.com/2016/05/25/materialpropertyblocks/" target="_blank" rel="noopener">PerRenderData的应用</a></p></li><li><p>[Toggle]：材质球调试器, 使用勾选的方式显示</p></li><li><p>[IntRange]：材质球调试器, 滑块拖动时将以整数方式变化</p></li><li><p>[Enum(UnityEngine.Rendering.CullMode)]：材质球调试器, 显示下拉选择, 内置枚举</p></li><li><p>[Enum(MyEnum_0,0,MyEnum_1,1)]：材质球调试器, 显示下拉选择, 自定义枚举</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity Shader 内置变量</title>
      <link href="/Unity%20Shader%20%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F.html"/>
      <url>/Unity%20Shader%20%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F.html</url>
      
        <content type="html"><![CDATA[<br> <p>Unity Shader 内置变量总结，方便查阅  </p><br>  <h4 id="转换相关变量（矩阵）"><a href="#转换相关变量（矩阵）" class="headerlink" title="转换相关变量（矩阵）"></a>转换相关变量（矩阵）</h4><br>  <p>类型都是 float4x4  </p><table><thead><tr><th></th><th><strong>Name</strong></th><th><strong>Value</strong></th></tr></thead><tbody><tr><td>模型 &gt;&gt; 投影</td><td>UNITY_MATRIX_MVP</td><td>Current model * view * projection matrix.</td></tr><tr><td>模型 &gt;&gt; 相机</td><td>UNITY_MATRIX_MV</td><td>Current model * view matrix.</td></tr><tr><td>世界 &gt;&gt; 相机</td><td>UNITY_MATRIX_V</td><td>Current view matrix.</td></tr><tr><td>相机 &gt;&gt; 投影</td><td>UNITY_MATRIX_P</td><td>Current projection matrix.</td></tr><tr><td>世界 &gt;&gt; 投影</td><td>UNITY_MATRIX_VP</td><td>Current view * projection matrix.</td></tr><tr><td>MV的转置矩阵</td><td>UNITY_MATRIX_T_MV</td><td>Transpose of model * view matrix.</td></tr><tr><td>MV的逆转置矩阵</td><td>UNITY_MATRIX_IT_MV</td><td>Inverse transpose of model * view matrix.</td></tr><tr><td>模型 &gt;&gt; 世界</td><td>unity_ObjectToWorld</td><td>Current model matrix.</td></tr><tr><td>世界 &gt;&gt; 模型</td><td>unity_WorldToObject</td><td>Inverse of current world matrix.</td></tr></tbody></table><br>  <br>  <h4 id="相机和屏幕相关变量"><a href="#相机和屏幕相关变量" class="headerlink" title="相机和屏幕相关变量"></a>相机和屏幕相关变量</h4><br>  <table><thead><tr><th align="left"><strong>Name</strong></th><th align="left"><strong>Type</strong></th><th><strong>Value</strong></th></tr></thead><tbody><tr><td align="left">_WorldSpaceCameraPos</td><td align="left">float3</td><td>World space position of the camera.</td></tr><tr><td align="left">_ProjectionParams</td><td align="left">float4</td><td><code>x</code> is 1.0 (or –1.0 if currently rendering with a <a href="https://docs.unity3d.com/Manual/SL-PlatformDifferences.html" target="_blank" rel="noopener">flipped projection matrix</a>), <code>y</code> is the camera’s near plane, <code>z</code> is the camera’s far plane and <code>w</code> is 1/FarPlane.</td></tr><tr><td align="left">_ScreenParams</td><td align="left">float4</td><td><code>x</code> is the width of the camera’s target texture in <strong>pixels</strong> , <code>y</code> is the height of the camera’s target texture in pixels, <code>z</code> is 1.0 + 1.0/width and <code>w</code> is 1.0 + 1.0/height.</td></tr><tr><td align="left">_ZBufferParams</td><td align="left">float4</td><td>Used to linearize Z buffer values. <code>x</code> is (1-far/near), <code>y</code> is (far/near), <code>z</code> is (x/far) and <code>w</code> is (y/far).</td></tr><tr><td align="left">unity_OrthoParams</td><td align="left">float4</td><td><code>x</code> is orthographic camera’s width, <code>y</code> is orthographic camera’s height, <code>z</code> is unused and <code>w</code> is 1.0 when camera is orthographic, 0.0 when perspective.</td></tr><tr><td align="left">unity_CameraProjection</td><td align="left">float4x4</td><td>Camera’s projection matrix.</td></tr><tr><td align="left">unity_CameraInvProjection</td><td align="left">float4x4</td><td>Inverse of camera’s projection matrix.</td></tr><tr><td align="left">unity_CameraWorldClipPlanes[6]</td><td align="left">float4</td><td>Camera frustum plane world space equations, in this order: left, right, bottom, top, near, far.</td></tr></tbody></table><br>  <br>  <h4 id="时间相关变量"><a href="#时间相关变量" class="headerlink" title="时间相关变量"></a>时间相关变量</h4><br>  <table><thead><tr><th align="left"><strong>Name</strong></th><th align="left"><strong>Type</strong></th><th><strong>Value</strong></th></tr></thead><tbody><tr><td align="left">_Time</td><td align="left">float4</td><td>Time since level load (t/20, t, tx2, tx3), use to animate things inside the shaders.</td></tr><tr><td align="left">_SinTime</td><td align="left">float4</td><td>Sine of time: (t/8, t/4, t/2, t).</td></tr><tr><td align="left">_CosTime</td><td align="left">float4</td><td>Cosine of time: (t/8, t/4, t/2, t).</td></tr><tr><td align="left">unity_DeltaTime</td><td align="left">float4</td><td>Delta time: (dt, 1/dt, smoothDt, 1/smoothDt).</td></tr></tbody></table><br>  <br>  <h4 id="光照相关变量"><a href="#光照相关变量" class="headerlink" title="光照相关变量"></a>光照相关变量</h4><br>  <blockquote><p>Light参数以不同的方式传递给着色器，具体取决于渲染路径使用，以及在着色器中使用哪个LightMode Pass Tag。  </p></blockquote><br>  <h5 id="前向渲染-（ForwardBase-和-ForwardAdd-pass-类型）"><a href="#前向渲染-（ForwardBase-和-ForwardAdd-pass-类型）" class="headerlink" title="前向渲染 （ForwardBase 和 ForwardAdd pass 类型）"></a>前向渲染 （ForwardBase 和 ForwardAdd pass 类型）</h5><table><thead><tr><th><strong>Name</strong></th><th><strong>Type</strong></th><th><strong>Value</strong></th></tr></thead><tbody><tr><td>_LightColor0 <em>(declared in Lighting.cginc)</em></td><td>fixed4</td><td>Light color.</td></tr><tr><td>_WorldSpaceLightPos0</td><td>float4</td><td>Directional lights: (world space direction, 0). Other lights: (world space position, 1).</td></tr><tr><td>_LightMatrix0 <em>(declared in AutoLight.cginc)</em></td><td>float4x4</td><td>World-to-light matrix. Used to sample cookie &amp; attenuation textures.</td></tr><tr><td>unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0</td><td>float4</td><td><em>(ForwardBase pass only)</em> world space positions of first four non-important point lights.</td></tr><tr><td>unity_4LightAtten0</td><td>float4</td><td><em>(ForwardBase pass only)</em> attenuation factors of first four non-important point lights.</td></tr><tr><td>unity_LightColor</td><td>half4[4]</td><td><em>(ForwardBase pass only)</em> colors of of first four non-important point lights.</td></tr><tr><td>unity_WorldToShadow</td><td>float4x4[4]</td><td>World-to-shadow matrices. One matrix for spot lights, up to four for directional light cascades.</td></tr></tbody></table><br>  <br>  <h5 id="延迟着色和延迟光照相关变量"><a href="#延迟着色和延迟光照相关变量" class="headerlink" title="延迟着色和延迟光照相关变量"></a>延迟着色和延迟光照相关变量</h5><br>  <p>用在 lighting pass 着色器中（定义在UnityDeferredLibrary.cginc中）  </p><table><thead><tr><th align="left"><strong>Name</strong></th><th align="left"><strong>Type</strong></th><th align="left"><strong>Value</strong></th></tr></thead><tbody><tr><td align="left">_LightColor</td><td align="left">float4</td><td align="left">Light color.</td></tr><tr><td align="left">_LightMatrix0</td><td align="left">float4x4</td><td align="left">World-to-light matrix. Used to sample cookie &amp; attenuation textures.</td></tr><tr><td align="left">unity_WorldToShadow</td><td align="left">float4x4[4]</td><td align="left">World-to-shadow matrices. One matrix for spot lights, up to four for directional light cascades.</td></tr></tbody></table><br>  <br>  <h5 id="Vertex-Lit-渲染路径下的相关变量"><a href="#Vertex-Lit-渲染路径下的相关变量" class="headerlink" title="Vertex-Lit 渲染路径下的相关变量"></a>Vertex-Lit 渲染路径下的相关变量</h5><br>  <blockquote><p>关于 Vertex-Lit渲染路径：Vertex Lit路径通常在一个 pass 中渲染每个对象，并为每个顶点计算所有灯光的光照。它是最快的渲染路径，并且拥有最多的硬件支持。但由于光照计算在顶点级别，它不支持大多数逐像素效果：阴影，法线贴图，灯管烘焙（light cookies），高精细度的镜面高光都不被支持。  </p></blockquote><p>最多可为 Vertex pass 类型设置8个灯;始终从最亮的一个开始排序。因此，如果要同时渲染受两个灯影响的对象，则可以在数组中前两个条目。如果影响对象的光线少于8，则其余部分的颜色将设置为黑色。  </p><br>  <table><thead><tr><th align="left"><strong>Name</strong></th><th align="left"><strong>Type</strong></th><th><strong>Value</strong></th></tr></thead><tbody><tr><td align="left">unity_LightColor</td><td align="left">half4[8]</td><td>Light colors.</td></tr><tr><td align="left">unity_LightPosition</td><td align="left">float4[8]</td><td>View-space light positions. (-direction,0) for directional lights; (position,1) for point/spot lights.</td></tr><tr><td align="left">unity_LightAtten</td><td align="left">half4[8]</td><td>Light attenuation factors. <em>x</em> is cos(spotAngle/2) or –1 for non-spot lights; <em>y</em> is 1/cos(spotAngle/4) or 1 for non-spot lights; <em>z</em> is quadratic attenuation; <em>w</em> is squared light range.</td></tr><tr><td align="left">unity_SpotDirection</td><td align="left">float4[8]</td><td>View-space spot light positions; (0,0,1,0) for non-spot lights.</td></tr></tbody></table><br>  <br>  <h4 id="雾和环境（Ambient）相关变量"><a href="#雾和环境（Ambient）相关变量" class="headerlink" title="雾和环境（Ambient）相关变量"></a>雾和环境（Ambient）相关变量</h4><br>  <table><thead><tr><th><strong>Name</strong></th><th><strong>Type</strong></th><th><strong>Value</strong></th></tr></thead><tbody><tr><td>unity_AmbientSky</td><td>fixed4</td><td>Sky ambient lighting color in gradient ambient lighting case.</td></tr><tr><td>unity_AmbientEquator</td><td>fixed4</td><td>Equator ambient lighting color in gradient ambient lighting case.</td></tr><tr><td>unity_AmbientGround</td><td>fixed4</td><td>Ground ambient lighting color in gradient ambient lighting case.</td></tr><tr><td>UNITY_LIGHTMODEL_AMBIENT</td><td>fixed4</td><td>Ambient lighting color (sky color in gradient ambient case). Legacy variable.</td></tr><tr><td>unity_FogColor</td><td>fixed4</td><td>Fog color.</td></tr><tr><td>unity_FogParams</td><td>float4</td><td>Parameters for fog calculation: (density / sqrt(ln(2)), density / ln(2), –1/(end-start), end/(end-start)). <em>x</em> is useful for Exp2 fog mode, <em>y</em> for Exp mode, <em>z</em> and <em>w</em> for Linear mode.</td></tr></tbody></table><br>  <br>  <h4 id="其他变量"><a href="#其他变量" class="headerlink" title="其他变量"></a>其他变量</h4><br>  <table><thead><tr><th align="left"><strong>Name</strong></th><th align="left"><strong>Type</strong></th><th><strong>Value</strong></th></tr></thead><tbody><tr><td align="left">unity_LODFade</td><td align="left">float4</td><td>Level-of-detail fade when using <a href="https://docs.unity3d.com/Manual/class-LODGroup.html" target="_blank" rel="noopener">LODGroup</a>. <em>x</em> is fade (0..1), <em>y</em> is fade quantized to 16 levels, <em>z</em> and <em>w</em> unused.</td></tr><tr><td align="left">_TextureSampleAdd</td><td align="left">float4</td><td>Set automatically by Unity <strong>for UI only</strong> based on whether the texture being used is in Alpha8 format (the value is set to (1,1,1,0)) or not (the value is set to (0,0,0,0)).</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解RenderType</title>
      <link href="/Understanding%20Unity%20Shader%20Tag%20&#39;RenderType&#39;.html"/>
      <url>/Understanding%20Unity%20Shader%20Tag%20&#39;RenderType&#39;.html</url>
      
        <content type="html"><![CDATA[<br><h4 id="RenderType的作用"><a href="#RenderType的作用" class="headerlink" title="RenderType的作用"></a>RenderType的作用</h4><p>李白说：天生我材必有用。那么RenderType的作用到底是什么呢？</p><p>贴一段Unity对RenderType的描述：</p><blockquote><p>RenderTypetag categorizes shaders into several predefined groups, e.g. is is an opaque shader, or an alpha-tested shader etc. This is used by <a href="https://docs.unity3d.com/Manual/SL-ShaderReplacement.html" target="_blank" rel="noopener">Shader Replacement</a> and in some cases used to produce <a href="https://docs.unity3d.com/Manual/SL-CameraDepthTexture.html" target="_blank" rel="noopener">camera’s depth texture</a>. </p></blockquote><p>可知，RenderType可以在替代渲染中用到，也可以用来生成相机的深度纹理。</p><br><h4 id="使用RenderType的方法"><a href="#使用RenderType的方法" class="headerlink" title="使用RenderType的方法"></a>使用RenderType的方法</h4><p>替换渲染通过使用 Camera.RenderWithShader 或者 Camera.SetReplacementShader 两个方法进行，这两个方法都接受两个参数，分别为 replacementShader 和 “替换标签” replacementTag，进行替换渲染时，场景中物体仍然使用他们的材质，但实际用于渲染的 Shader 已经改变，至于使用什么 Shader 进行渲染则由第二个参数 replacementTag 决定。规则如下：</p><ol><li><p>如果 replacementTag 为空，则场景中所有物体使用 replacementShader 进行渲染。</p></li><li><p>如果 replacementTag 不为空，将 replacementTag 的值记为 rtValue，继续进行以下验证：</p><ol><li><p>查询物体原有 Shader 中是否存在名为 rtValue 的 tag。如果不存在，该物体将不被渲染。</p></li><li><p>查询 replacementShader 中是否存在名为 rtValue 的 tag，且该 tag 的值和物体原有 Shader 中的名为 rtValue 的 tag 的值是否相同，如果不存在该 tag 或 tag 的值不相同，则该物体不被渲染。</p><p>当同时满足以上两个条件时，物体的原有 Shader 会被替换为 replacementShader 中对应的那个 SubShader（即 tag 值相同的 Shader ) 进行渲染。</p></li></ol></li></ol><br><h4 id="Unity中RenderType的默认值"><a href="#Unity中RenderType的默认值" class="headerlink" title="Unity中RenderType的默认值"></a>Unity中RenderType的默认值</h4><ol><li>Opaque：带有该标签的 ReplacementShader 可用于替换大多数 Shader（法线着色器、自发光着色器、反射着色器、地形着色器）</li><li>Transparent：用于半透明着色器</li><li>TransparentCutout：蒙面透明着色器</li><li>Background：天空盒子</li><li>Overlay：GUITexture、光晕着色器、闪光着色器</li><li>TreeOpaque：地形引擎中的树皮</li><li>TreeTransparentCutout：地形引擎中的树叶</li><li>TreeBillboard：地形引擎中的广告牌树</li><li>Grass：地形引擎中的草</li><li>GrassBillboard：地形引擎中的广告牌草</li></ol>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语学习之品歌词</title>
      <link href="/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%93%81%E6%AD%8C%E8%AF%8D.html"/>
      <url>/%E6%97%A5%E8%AF%AD%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%93%81%E6%AD%8C%E8%AF%8D.html</url>
      
        <content type="html"><![CDATA[<p>鬼灭之刃    《红莲华》</p><p>Tsuyoku nareru riyū o shitta</p><p>強くなれる理由を知った</p><p>我知道为什么我会坚强</p><p>Boku o tsurete susume</p><p>僕を連れて　進め</p><p>带着我 前进吧</p><p>Doro-darake no sōmatō ni you</p><p>泥だらけの走馬灯に酔う</p><p>沉醉于泥泞不堪的走马灯</p><p>Kowabaru kokoro furueru te wa</p><p>強張る心　震える手は</p><p>逞强的心 颤抖的手</p><p>sekai ni  u chi no me sa re te<br>世界  に  打 ち  の め  さ れ て<br>被世界击败</p><p>ma ke ru i mi o shi t ta<br>負 け る 意味  お し っ た<br>明白了失败的意义</p>]]></content>
      
      
      <categories>
          
          <category> 语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语假名之图像编码</title>
      <link href="/%E6%97%A5%E8%AF%AD%E5%81%87%E5%90%8D%E4%B9%8B%E5%9B%BE%E5%83%8F%E7%BC%96%E7%A0%81.html"/>
      <url>/%E6%97%A5%E8%AF%AD%E5%81%87%E5%90%8D%E4%B9%8B%E5%9B%BE%E5%83%8F%E7%BC%96%E7%A0%81.html</url>
      
        <content type="html"><![CDATA[<h4 id="我这一生，尽是可耻之事"><a href="#我这一生，尽是可耻之事" class="headerlink" title="我这一生，尽是可耻之事"></a>我这一生，尽是可耻之事</h4><p>​                        – 太宰治</p><h4 id="我这一篇，尽是粗鄙之语"><a href="#我这一篇，尽是粗鄙之语" class="headerlink" title="我这一篇，尽是粗鄙之语"></a>我这一篇，尽是粗鄙之语</h4><p>​                        – エロ老师</p><p>以下为本人日语学习过程中为记忆假名而使用的荒诞的方法，可能不会对除我之外的许多人有帮助，<br>并且根据别人的经验之谈，是不太建议以这种看起来较为投机取巧的方式记忆假名的，因此各位看此篇<br>文章时浅尝辄止即可。如果此文对你产生了一些微小的帮助，本人不胜荣幸；如果此文令你感到不适，<br>请速速逃离。</p><h4 id="第一行假名"><a href="#第一行假名" class="headerlink" title="第一行假名"></a>第一行假名</h4><p>罗马音：                  a   i   u   e  o</p><p>平假名：                 あ  い  う  え  お</p><p>片假名：                 ア  イ  ウ  エ  オ</p><h4 id="第二行假名"><a href="#第二行假名" class="headerlink" title="第二行假名"></a>第二行假名</h4><p>罗马音：                 ka   ki   ku   ke   ko    </p><p>平假名：                 か  き  く  け  こ</p><p>片假名：                 カ  キ  ク  ケ  コ</p><p>ki：撑杆跳成功起飞<br>ko：小括号、中括号</p><h4 id="第三行假名"><a href="#第三行假名" class="headerlink" title="第三行假名"></a>第三行假名</h4><p>罗马音：                 sa   shi   su   se   so</p><p>平假名：                 さ  し  す  せ  そ</p><p>片假名：                 サ  シ  ス  セ  ソ</p><p>sa：撑杆跳失败摔骨折<br>shi：姜子牙溪上钓鱼愿者上钩</p><h4 id="第四行假名"><a href="#第四行假名" class="headerlink" title="第四行假名"></a>第四行假名</h4><p>罗马音：                ta     chi   tsu     te   to</p><p>平假名：                た　ち　つ　て　と</p><p>片假名：                タ    チ　ツ    テ　ト</p><p>ta：太阳变夕阳照在塔上<br>chi：５千7<br>tsu：屠夫把川少勾过来吃了<br>te：与chi对应<br>to：上山下乡拔萝卜</p><h4 id="第五行假名"><a href="#第五行假名" class="headerlink" title="第五行假名"></a>第五行假名</h4><p>罗马音：                na     ni      nu   ne    no</p><p>平假名：                な　に　ぬ　ね　の</p><p>片假名：                ナ    ニ　ヌ    ネ　ノ</p><p>na：四爷废了叶赫那拉氏变寡人<br>ni：立人+二 –》 仁<br>nu：奴隶<br>ne：有权有势的快乐<br>no：91罗先生</p><h4 id="第六行假名"><a href="#第六行假名" class="headerlink" title="第六行假名"></a>第六行假名</h4><p>罗马音：                ha     hi    hu　he   ho</p><p>平假名：                は　ひ　ふ　へ　ほ</p><p>片假名：                ハ    ヒ　フ    ヘ　ホ</p><p>ha：哈尔滨房东押一付八<br>hi：荆轲say　hi匕首现，秦王绕柱而环走<br>hu：小夫被胖虎一巴掌扇飞<br>hehe：女神今天又对我呵呵笑了真开心<br>ho：钻木取火</p><h4 id="第七行假名"><a href="#第七行假名" class="headerlink" title="第七行假名"></a>第七行假名</h4><p>罗马音：                ma     mi    mu　me    mo</p><p>平假名：                ま　み　む  め　も</p><p>片假名：                マ    ミ　ム    メ　モ</p><p>ma：厉兵秣马修断矛<br>mi：阿尔法狗抽出3米大刀<br>mu：克己废公慕容复<br>me：女神X我么么哒<br>mo：首尾不相顾 毛</p><h4 id="第八行假名"><a href="#第八行假名" class="headerlink" title="第八行假名"></a>第八行假名</h4><p>罗马音：                ya     i   yu      e   yo</p><p>平假名：                や　い　ゆ　え　よ</p><p>片假名：                ヤ    イ　ユ    エ　ヨ</p><p>yu：周幽王怀揽褒姒城上戏诸侯<br>yo：上寻下yo</p><h4 id="第九行假名"><a href="#第九行假名" class="headerlink" title="第九行假名"></a>第九行假名</h4><p>罗马音：                ra     ri    ru　re    ro</p><p>平假名：                ら  り  る  れ  ろ</p><p>片假名：                ラ    リ　ル  レ　ロ</p><p>ra：la是第五个音<br>ri：帅的让女神失去卫生巾<br>ru：大胸小三怀孕生子成功上位<br>re：札幌一夜东京热，回家失去另一半<br>ro：ro萝莉有3好：身轻体柔易工口</p><h4 id="第十行假名"><a href="#第十行假名" class="headerlink" title="第十行假名"></a>第十行假名</h4><p>罗马音：                wa     i     u     e     wo</p><p>平假名：                わ　い　う　え　を</p><p>片假名：                ワ    イ　ウ    エ　ヲ</p><p>wa:娃读一半书，仅得一半屋（ウ）<br>wo：我一脚踩空，是祸非福（F）</p><p>n<br>ん<br>ン</p><p>n：伸长了脖子</p>]]></content>
      
      
      <categories>
          
          <category> 语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world.html"/>
      <url>/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>template</title>
      <link href="/template.html"/>
      <url>/template.html</url>
      
        <content type="html"><![CDATA[<p>This is the template post.</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
